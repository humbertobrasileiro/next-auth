{
    "sourceFile": "src/pages/login.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1631558232690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1632784852423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { signIn } from 'next-auth/client';\n import { useRouter } from 'next/dist/client/router';\n import { useState } from 'react';\n+import { Button } from '../components/Button';\n import { FormLogin } from '../components/FormLogin';\n import { Wrapper } from '../components/Wrapper';\n \n export default function LoginPage() {\n@@ -23,10 +24,15 @@\n     const redirect = router.query?.redirect || '/';\n     router.push(redirect as string);\n   };\n \n+  const handleLoginGoogle = async () => {\n+    await signIn('google', { callbackUrl: '/' });\n+  };\n   return (\n     <Wrapper>\n       <FormLogin onLogin={handleLogin} errorMessage={error} />\n+      <br />\n+      <Button onClick={handleLoginGoogle}>Login com Google</Button>\n     </Wrapper>\n   );\n }\n"
                }
            ],
            "date": 1631558232690,
            "name": "Commit-0",
            "content": "import { signIn } from 'next-auth/client';\nimport { useRouter } from 'next/dist/client/router';\nimport { useState } from 'react';\nimport { FormLogin } from '../components/FormLogin';\nimport { Wrapper } from '../components/Wrapper';\n\nexport default function LoginPage() {\n  const router = useRouter();\n  const [error, setError] = useState('');\n\n  const handleLogin = async (email: string, password: string) => {\n    const response = await signIn('credentials', {\n      email,\n      password,\n      redirect: false,\n    });\n\n    if (!response.ok) {\n      setError('Usuário ou senha inválidos');\n      return;\n    }\n\n    const redirect = router.query?.redirect || '/';\n    router.push(redirect as string);\n  };\n\n  return (\n    <Wrapper>\n      <FormLogin onLogin={handleLogin} errorMessage={error} />\n    </Wrapper>\n  );\n}\n"
        }
    ]
}