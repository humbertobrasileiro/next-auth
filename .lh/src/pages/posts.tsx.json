{
    "sourceFile": "src/pages/posts.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1631559626415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1631560243914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,70 @@\n import { GetServerSideProps } from 'next';\n-import { useSession } from 'next-auth/client';\n+import { getSession, useSession } from 'next-auth/client';\n+import Link from 'next/link';\n+\n import { Wrapper } from '../components/Wrapper';\n+import { gqlClient } from '../graphql/client';\n+import { GQL_QUERY_GET_POSTS } from '../graphql/queries/post';\n+import { frontEndRedirect } from '../utils/front-end-redirect';\n+import { serverSideRedirect } from '../utils/server-side-redirect';\n \n-export default function Index() {\n-  const [session] = useSession();\n+export type StrapiPost = {\n+  id?: string;\n+  title: string;\n+  content: string;\n+};\n \n+export type PostsPageProps = {\n+  posts?: StrapiPost[];\n+};\n+\n+export default function PostsPage({ posts = [] }: PostsPageProps) {\n+  const [session, loading] = useSession();\n+\n+  if (!session && !loading) {\n+    return frontEndRedirect();\n+  }\n+\n+  if (typeof window !== 'undefined' && loading) return null;\n+\n+  if (!session) {\n+    return <p>Você não está autenticado</p>;\n+  }\n+\n   return (\n     <Wrapper>\n       <h1>Olá {session?.user?.name || 'ninguém'}</h1>\n+\n+      {posts.map((p) => (\n+        <p key={'post-' + p.id}>\n+          <Link href={`/${p.id}`}>\n+            <a>{p.title}</a>\n+          </Link>\n+        </p>\n+      ))}\n     </Wrapper>\n   );\n }\n \n-export const getServerSideProps: GetServerSideProps = async () => {\n-  return {\n-    props: {},\n-  };\n+export const getServerSideProps: GetServerSideProps = async (ctx) => {\n+  const session = await getSession(ctx);\n+\n+  if (!session) {\n+    return serverSideRedirect(ctx);\n+  }\n+\n+  try {\n+    const { posts } = await gqlClient.request(GQL_QUERY_GET_POSTS, null, {\n+      Authorization: `Bearer ${session.accessToken}`,\n+    });\n+\n+    return {\n+      props: {\n+        session,\n+        posts,\n+      },\n+    };\n+  } catch (e) {\n+    return serverSideRedirect(ctx);\n+  }\n };\n"
                },
                {
                    "date": 1631574014514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n import { GetServerSideProps } from 'next';\n import { getSession, useSession } from 'next-auth/client';\n import Link from 'next/link';\n+import { useEffect, useState } from 'react';\n \n import { Wrapper } from '../components/Wrapper';\n import { gqlClient } from '../graphql/client';\n+import { GQL_MUTATION_DELETE_POST } from '../graphql/mutations/post';\n import { GQL_QUERY_GET_POSTS } from '../graphql/queries/post';\n import { frontEndRedirect } from '../utils/front-end-redirect';\n import { serverSideRedirect } from '../utils/server-side-redirect';\n \n@@ -19,9 +21,15 @@\n };\n \n export default function PostsPage({ posts = [] }: PostsPageProps) {\n   const [session, loading] = useSession();\n+  const [statePosts, setStatePosts] = useState(posts);\n+  const [deleting, setDeleting] = useState(false);\n \n+  useEffect(() => {\n+    setStatePosts(posts);\n+  }, [posts]);\n+\n   if (!session && !loading) {\n     return frontEndRedirect();\n   }\n \n@@ -30,17 +38,43 @@\n   if (!session) {\n     return <p>Você não está autenticado</p>;\n   }\n \n+  const handleDelete = async (id: string) => {\n+    setDeleting(true);\n+\n+    try {\n+      await gqlClient.request(\n+        GQL_MUTATION_DELETE_POST,\n+        {\n+          id,\n+        },\n+        {\n+          Authorization: `Bearer ${session.accessToken}`,\n+        },\n+      );\n+\n+      setStatePosts((s) => s.filter((p) => p.id !== id));\n+    } catch (e) {\n+      alert('Não foi possível excluir este post');\n+    }\n+\n+    setDeleting(false);\n+  };\n+\n   return (\n     <Wrapper>\n       <h1>Olá {session?.user?.name || 'ninguém'}</h1>\n \n-      {posts.map((p) => (\n+      {statePosts.map((p) => (\n         <p key={'post-' + p.id}>\n           <Link href={`/${p.id}`}>\n             <a>{p.title}</a>\n-          </Link>\n+          </Link>{' '}\n+          |{' '}\n+          <button onClick={() => handleDelete(p.id)} disabled={deleting}>\n+            Excluir\n+          </button>\n         </p>\n       ))}\n     </Wrapper>\n   );\n"
                },
                {
                    "date": 1631749103422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,23 @@\n import { GetServerSideProps } from 'next';\n-import { getSession, useSession } from 'next-auth/client';\n-import Link from 'next/link';\n-import { useEffect, useState } from 'react';\n+import { getSession } from 'next-auth/client';\n \n-import { Wrapper } from '../components/Wrapper';\n+import { StrapiPost } from '../components/FormPost';\n import { gqlClient } from '../graphql/client';\n-import { GQL_MUTATION_DELETE_POST } from '../graphql/mutations/post';\n import { GQL_QUERY_GET_POSTS } from '../graphql/queries/post';\n-import { frontEndRedirect } from '../utils/front-end-redirect';\n import { serverSideRedirect } from '../utils/server-side-redirect';\n+import { PrivateComponent } from '../components/PrivateComponent';\n+import { PostsTemplate } from '../templates/Posts';\n \n-export type StrapiPost = {\n-  id?: string;\n-  title: string;\n-  content: string;\n-};\n-\n export type PostsPageProps = {\n   posts?: StrapiPost[];\n };\n \n export default function PostsPage({ posts = [] }: PostsPageProps) {\n-  const [session, loading] = useSession();\n-  const [statePosts, setStatePosts] = useState(posts);\n-  const [deleting, setDeleting] = useState(false);\n-\n-  useEffect(() => {\n-    setStatePosts(posts);\n-  }, [posts]);\n-\n-  if (!session && !loading) {\n-    return frontEndRedirect();\n-  }\n-\n-  if (typeof window !== 'undefined' && loading) return null;\n-\n-  if (!session) {\n-    return <p>Você não está autenticado</p>;\n-  }\n-\n-  const handleDelete = async (id: string) => {\n-    setDeleting(true);\n-\n-    try {\n-      await gqlClient.request(\n-        GQL_MUTATION_DELETE_POST,\n-        {\n-          id,\n-        },\n-        {\n-          Authorization: `Bearer ${session.accessToken}`,\n-        },\n-      );\n-\n-      setStatePosts((s) => s.filter((p) => p.id !== id));\n-    } catch (e) {\n-      alert('Não foi possível excluir este post');\n-    }\n-\n-    setDeleting(false);\n-  };\n-\n   return (\n-    <Wrapper>\n-      <h1>Olá {session?.user?.name || 'ninguém'}</h1>\n-\n-      {statePosts.map((p) => (\n-        <p key={'post-' + p.id}>\n-          <Link href={`/${p.id}`}>\n-            <a>{p.title}</a>\n-          </Link>{' '}\n-          |{' '}\n-          <button onClick={() => handleDelete(p.id)} disabled={deleting}>\n-            Excluir\n-          </button>\n-        </p>\n-      ))}\n-    </Wrapper>\n+    <PrivateComponent>\n+      <PostsTemplate posts={posts} />\n+    </PrivateComponent>\n   );\n }\n \n export const getServerSideProps: GetServerSideProps = async (ctx) => {\n"
                }
            ],
            "date": 1631559626415,
            "name": "Commit-0",
            "content": "import { GetServerSideProps } from 'next';\nimport { useSession } from 'next-auth/client';\nimport { Wrapper } from '../components/Wrapper';\n\nexport default function Index() {\n  const [session] = useSession();\n\n  return (\n    <Wrapper>\n      <h1>Olá {session?.user?.name || 'ninguém'}</h1>\n    </Wrapper>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  return {\n    props: {},\n  };\n};\n"
        }
    ]
}