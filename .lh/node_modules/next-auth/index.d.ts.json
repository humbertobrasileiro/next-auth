{
    "sourceFile": "node_modules/next-auth/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1632862037171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1632862494600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -418,9 +418,8 @@\n }\n \n export interface DefaultSession extends Record<string, unknown> {\n   user?: {\n-    id?: string | null,\n     name?: string | null\n     email?: string | null\n     image?: string | null\n   }\n"
                }
            ],
            "date": 1632862037171,
            "name": "Commit-0",
            "content": "// Minimum TypeScript Version: 3.6\n\n/// <reference types=\"node\" />\n\nimport { ConnectionOptions } from \"typeorm\"\nimport { Adapter } from \"./adapters\"\nimport { JWTOptions, JWT } from \"./jwt\"\nimport { AppProviders } from \"./providers\"\nimport {\n  Awaitable,\n  NextApiRequest,\n  NextApiResponse,\n  NextApiHandler,\n} from \"./internals/utils\"\n\n/**\n * Configure your NextAuth instance\n *\n * [Documentation](https://next-auth.js.org/configuration/options#options)\n */\nexport interface NextAuthOptions {\n  /**\n   * An array of authentication providers for signing in\n   * (e.g. Google, Facebook, Twitter, GitHub, Email, etc) in any order.\n   * This can be one of the built-in providers or an object with a custom provider.\n   * * **Default value**: `[]`\n   * * **Required**: *Yes*\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#providers) | [Providers documentation](https://next-auth.js.org/configuration/providers)\n   */\n  providers: AppProviders\n  /**\n   * A database connection string or configuration object.\n   * * **Default value**: `null`\n   * * **Required**: *No (unless using email provider)*\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#database) | [Databases](https://next-auth.js.org/configuration/databases)\n   */\n  database?: string | Record<string, any> | ConnectionOptions\n  /**\n   * A random string used to hash tokens, sign cookies and generate cryptographic keys.\n   * If not specified is uses a hash of all configuration options, including Client ID / Secrets for entropy.\n   * The default behavior is volatile, and **it is strongly recommended** you explicitly specify a value\n   * to avoid invalidating end user sessions when configuration changes are deployed.\n   * * **Default value**: `string` (SHA hash of the \"options\" object)\n   * * **Required**: No - **but strongly recommended**!\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#secret)\n   */\n  secret?: string\n  /**\n   * Configure your session like if you want to use JWT or a database,\n   * how long until an idle session expires, or to throttle write operations in case you are using a database.\n   * * **Default value**: See the documentation page\n   * * **Required**: No\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#session)\n   */\n  session?: SessionOptions\n  /**\n   * JSON Web Tokens can be used for session tokens if enabled with the `session: { jwt: true }` option.\n   * JSON Web Tokens are enabled by default if you have not specified a database.\n   * By default JSON Web Tokens are signed (JWS) but not encrypted (JWE),\n   * as JWT encryption adds additional overhead and comes with some caveats.\n   * You can enable encryption by setting `encryption: true`.\n   * * **Default value**: See the documentation page\n   * * **Required**: *No*\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#jwt)\n   */\n  jwt?: JWTOptions\n  /**\n   * Specify URLs to be used if you want to create custom sign in, sign out and error pages.\n   * Pages specified will override the corresponding built-in page.\n   * * **Default value**: `{}`\n   * * **Required**: *No*\n   * @example\n   *\n   * ```js\n   *   pages: {\n   *     signIn: '/auth/signin',\n   *     signOut: '/auth/signout',\n   *     error: '/auth/error',\n   *     verifyRequest: '/auth/verify-request',\n   *     newUser: '/auth/new-user'\n   *   }\n   * ```\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#pages) | [Pages documentation](https://next-auth.js.org/configuration/pages)\n   */\n  pages?: PagesOptions\n  /**\n   * Callbacks are asynchronous functions you can use to control what happens when an action is performed.\n   * Callbacks are *extremely powerful*, especially in scenarios involving JSON Web Tokens\n   * as they **allow you to implement access controls without a database** and to **integrate with external databases or APIs**.\n   * * **Default value**: See the Callbacks documentation\n   * * **Required**: *No*\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#callbacks) | [Callbacks documentation](https://next-auth.js.org/configuration/callbacks)\n   */\n  callbacks?: CallbacksOptions\n  /**\n   * Events are asynchronous functions that do not return a response, they are useful for audit logging.\n   * You can specify a handler for any of these events below - e.g. for debugging or to create an audit log.\n   * The content of the message object varies depending on the flow\n   * (e.g. OAuth or Email authentication flow, JWT or database sessions, etc),\n   * but typically contains a user object and/or contents of the JSON Web Token\n   * and other information relevant to the event.\n   * * **Default value**: `{}`\n   * * **Required**: *No*\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#events) | [Events documentation](https://next-auth.js.org/configuration/events)\n   */\n  events?: Partial<JWTEventCallbacks | SessionEventCallbacks>\n  /**\n   * By default NextAuth.js uses a database adapter that uses TypeORM and supports MySQL, MariaDB, Postgres and MongoDB and SQLite databases.\n   * An alternative adapter that uses Prisma, which currently supports MySQL, MariaDB and Postgres, is also included.\n   * You can use the adapter option to use the Prisma adapter - or pass in your own adapter\n   * if you want to use a database that is not supported by one of the built-in adapters.\n   * * **Default value**: TypeORM adapter\n   * * **Required**: *No*\n   *\n   * - ⚠ If the `adapter` option is specified it overrides the `database` option, only specify one or the other.\n   * - ⚠ Adapters are being migrated to their own home in a Community maintained repository.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#adapter) |\n   * [Default adapter](https://next-auth.js.org/schemas/adapters#typeorm-adapter) |\n   * [Community adapters](https://github.com/nextauthjs/adapters)\n   */\n  adapter?: ReturnType<Adapter>\n  /**\n   * Set debug to true to enable debug messages for authentication and database operations.\n   * * **Default value**: `false`\n   * * **Required**: *No*\n   *\n   * - ⚠ If you added a custom `logger`, this setting is ignored.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#debug) | [Logger documentation](https://next-auth.js.org/configuration/options#logger)\n   */\n  debug?: boolean\n  /**\n   * Override any of the logger levels (`undefined` levels will use the built-in logger),\n   * and intercept logs in NextAuth. You can use this option to send NextAuth logs to a third-party logging service.\n   * * **Default value**: `console`\n   * * **Required**: *No*\n   *\n   * @example\n   *\n   * ```js\n   * // /pages/api/auth/[...nextauth].js\n   * import log from \"logging-service\"\n   * export default NextAuth({\n   *   logger: {\n   *     error(code, ...message) {\n   *       log.error(code, message)\n   *     },\n   *     warn(code, ...message) {\n   *       log.warn(code, message)\n   *     },\n   *     debug(code, ...message) {\n   *       log.debug(code, message)\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * - ⚠ When set, the `debug` option is ignored\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#logger) |\n   * [Debug documentation](https://next-auth.js.org/configuration/options#debug)\n   */\n  logger?: LoggerInstance\n  /**\n   * Changes the theme of pages.\n   * Set to `\"light\"` if you want to force pages to always be light.\n   * Set to `\"dark\"` if you want to force pages to always be dark.\n   * Set to `\"auto\"`, (or leave this option out)if you want the pages to follow the preferred system theme.\n   * * **Default value**: `\"auto\"`\n   * * **Required**: *No*\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#theme) | [Pages documentation](\"https://next-auth.js.org/configuration/pages\")\n   */\n  theme?: Theme\n  /**\n   * When set to `true` then all cookies set by NextAuth.js will only be accessible from HTTPS URLs.\n   * This option defaults to `false` on URLs that start with `http://` (e.g. http://localhost:3000) for developer convenience.\n   * You can manually set this option to `false` to disable this security feature and allow cookies\n   * to be accessible from non-secured URLs (this is not recommended).\n   * * **Default value**: `true` for HTTPS and `false` for HTTP sites\n   * * **Required**: No\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#usesecurecookies)\n   *\n   * - ⚠ **This is an advanced option.** Advanced options are passed the same way as basic options,\n   * but **may have complex implications** or side effects.\n   * You should **try to avoid using advanced options** unless you are very comfortable using them.\n   */\n  useSecureCookies?: boolean\n  /**\n   * You can override the default cookie names and options for any of the cookies used by NextAuth.js.\n   * You can specify one or more cookies with custom properties,\n   * but if you specify custom options for a cookie you must provide all the options for that cookie.\n   * If you use this feature, you will likely want to create conditional behavior\n   * to support setting different cookies policies in development and production builds,\n   * as you will be opting out of the built-in dynamic policy.\n   * * **Default value**: `{}`\n   * * **Required**: No\n   *\n   * - ⚠ **This is an advanced option.** Advanced options are passed the same way as basic options,\n   * but **may have complex implications** or side effects.\n   * You should **try to avoid using advanced options** unless you are very comfortable using them.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/options#cookies) | [Usage example](https://next-auth.js.org/configuration/options#example)\n   */\n  cookies?: CookiesOptions\n}\n\n/**\n * Change the theme of the built-in pages.\n *\n * [Documentation](https://next-auth.js.org/configuration/options#theme) |\n * [Pages](https://next-auth.js.org/configuration/pages)\n */\nexport type Theme = \"auto\" | \"dark\" | \"light\"\n\n/**\n * Override any of the methods, and the rest will use the default logger.\n *\n * [Documentation](https://next-auth.js.org/configuration/options#logger)\n */\nexport interface LoggerInstance {\n  warn(code: string, ...message: unknown[]): void\n  error(code: string, ...message: unknown[]): void\n  debug(code: string, ...message: unknown[]): void\n}\n\n/**\n * Different tokens returned by OAuth Providers.\n * Some of them are available with different casing,\n * but they refer to the same value.\n */\nexport interface TokenSet {\n  accessToken: string\n  /** Kept for historical reasons, check out `expires_in` */\n  accessTokenExpires: null\n  idToken?: string\n  refreshToken?: string\n  access_token: string\n  expires_in?: number | null\n  refresh_token?: string\n  id_token?: string\n}\n\n/**\n * Usually contains information about the provider being used\n * and also extends `TokenSet`, which is different tokens returned by OAuth Providers.\n */\nexport interface Account extends TokenSet, Record<string, unknown> {\n  id: string\n  provider: string\n  type: string\n}\n\nexport interface DefaultProfile {\n  sub?: string\n  name?: string\n  email?: string\n  image?: string\n}\n\n/** The OAuth profile returned from your provider */\nexport interface Profile extends Record<string, unknown>, DefaultProfile {}\n\n/** [Documentation](https://next-auth.js.org/configuration/callbacks) */\nexport interface CallbacksOptions<\n  P extends Record<string, unknown> = Profile,\n  A extends Record<string, unknown> = Account\n> {\n  /**\n   * Use this callback to control if a user is allowed to sign in.\n   * Returning true will continue the sign-in flow.\n   * Throwing an error or returning a string will stop the flow, and redirect the user.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/callbacks#sign-in-callback)\n   */\n  signIn?(user: User, account: A, profile: P): Awaitable<string | boolean>\n  /**\n   * This callback is called anytime the user is redirected to a callback URL (e.g. on signin or signout).\n   * By default only URLs on the same URL as the site are allowed,\n   * you can use this callback to customise that behaviour.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/callbacks#redirect-callback)\n   */\n  redirect?(url: string, baseUrl: string): Awaitable<string>\n  /**\n   * This callback is called whenever a session is checked.\n   * (Eg.: invoking the `/api/session` endpoint, using `useSession` or `getSession`)\n   *\n   * - ⚠ By default, only a subset of the token is returned for increased security.\n   * If you want to make something available you added to the token through the `jwt` callback,\n   * you have to explicitely forward it here to make it available to the client.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/callbacks#session-callback) |\n   * [`jwt` callback](https://next-auth.js.org/configuration/callbacks#jwt-callback) |\n   * [`useSession`](https://next-auth.js.org/getting-started/client#usesession) |\n   * [`getSession`](https://next-auth.js.org/getting-started/client#getsession) |\n   *\n   */\n  session?(session: Session, userOrToken: JWT | User): Awaitable<Session>\n  /**\n   * This callback is called whenever a JSON Web Token is created (i.e. at sign in)\n   * or updated (i.e whenever a session is accessed in the client).\n   * Its content is forwarded to the `session` callback,\n   * where you can control what should be returned to the client.\n   * Anything else will be kept from your front-end.\n   *\n   * - ⚠ By default the JWT is signed, but not encrypted.\n   *\n   * [Documentation](https://next-auth.js.org/configuration/callbacks#jwt-callback) |\n   * [`session` callback](https://next-auth.js.org/configuration/callbacks#session-callback)\n   */\n  jwt?(\n    token: JWT,\n    user?: User,\n    account?: A,\n    profile?: P,\n    isNewUser?: boolean\n  ): Awaitable<JWT>\n}\n\n/** [Documentation](https://next-auth.js.org/configuration/options#cookies) */\nexport interface CookieOption {\n  name: string\n  options: {\n    httpOnly: boolean\n    sameSite: true | \"strict\" | \"lax\" | \"none\"\n    path?: string\n    secure: boolean\n    maxAge?: number\n    domain?: string\n  }\n}\n\n/** [Documentation](https://next-auth.js.org/configuration/options#cookies) */\nexport interface CookiesOptions {\n  sessionToken?: CookieOption\n  callbackUrl?: CookieOption\n  csrfToken?: CookieOption\n  pkceCodeVerifier?: CookieOption\n}\n\n/** [Documentation](https://next-auth.js.org/configuration/events) */\nexport type EventCallback<MessageType = unknown> = (\n  message: MessageType\n) => Promise<void>\n\n/**\n * If using a `credentials` type auth, the user is the raw response from your\n * credential provider.\n * For other providers, you'll get the User object from your adapter, the account,\n * and an indicator if the user was new to your Adapter.\n */\nexport interface SignInEventMessage {\n  user: User\n  account: Account\n  isNewUser?: boolean\n}\n\nexport interface LinkAccountEventMessage {\n  user: User\n  providerAccount: Record<string, unknown>\n}\n\n/**\n * The various event callbacks you can register for from next-auth\n */\nexport interface CommonEventCallbacks {\n  signIn: EventCallback<SignInEventMessage>\n  createUser: EventCallback<User>\n  updateUser: EventCallback<User>\n  linkAccount: EventCallback<LinkAccountEventMessage>\n  error: EventCallback\n}\n/**\n * The event callbacks will take this form if you are using JWTs:\n * signOut will receive the JWT and session will receive the session and JWT.\n */\nexport interface JWTEventCallbacks extends CommonEventCallbacks {\n  signOut: EventCallback<JWT>\n  session: EventCallback<{\n    session: Session\n    jwt: JWT\n  }>\n}\n/**\n * The event callbacks will take this form if you are using Sessions\n * and not using JWTs:\n * signOut will receive the underlying DB adapter's session object, and session\n * will receive the NextAuth client session with extra data.\n */\nexport interface SessionEventCallbacks extends CommonEventCallbacks {\n  signOut: EventCallback<Session | null>\n  session: EventCallback<{ session: Session }>\n}\nexport type EventCallbacks = JWTEventCallbacks | SessionEventCallbacks\n\nexport type EventType = keyof EventCallbacks\n\n/** [Documentation](https://next-auth.js.org/configuration/pages) */\nexport interface PagesOptions {\n  signIn?: string\n  signOut?: string\n  /** Error code passed in query string as ?error= */\n  error?: string\n  verifyRequest?: string\n  /** If set, new users will be directed here on first sign in */\n  newUser?: string\n}\n\nexport interface DefaultSession extends Record<string, unknown> {\n  user?: {\n    id?: string | null,\n    name?: string | null\n    email?: string | null\n    image?: string | null\n  }\n  expires?: string\n}\n\n/**\n * Returned by `useSession`, `getSession`, returned by the `session` callback\n * and also the shape received as a prop on the `Provider` React Context\n *\n * [`useSession`](https://next-auth.js.org/getting-started/client#usesession) |\n * [`getSession`](https://next-auth.js.org/getting-started/client#getsession) |\n * [`Provider`](https://next-auth.js.org/getting-started/client#provider) |\n * [`session` callback](https://next-auth.js.org/configuration/callbacks#jwt-callback)\n */\nexport interface Session extends Record<string, unknown>, DefaultSession {}\n\n/** [Documentation](https://next-auth.js.org/configuration/options#session) */\nexport interface SessionOptions {\n  jwt?: boolean\n  maxAge?: number\n  updateAge?: number\n}\n\nexport interface DefaultUser {\n  name?: string | null\n  email?: string | null\n  image?: string | null\n}\n\n/**\n * The shape of the returned object in the OAuth providers' `profile` callback,\n * available in the `jwt` and `session` callbacks,\n * or the second parameter of the `session` callback, when using a database.\n *\n * [`signIn` callback](https://next-auth.js.org/configuration/callbacks#sign-in-callback) |\n * [`session` callback](https://next-auth.js.org/configuration/callbacks#jwt-callback) |\n * [`jwt` callback](https://next-auth.js.org/configuration/callbacks#jwt-callback) |\n * [`profile` OAuth provider callback](https://next-auth.js.org/configuration/providers#using-a-custom-provider)\n */\nexport interface User extends Record<string, unknown>, DefaultUser {}\n\ndeclare function NextAuth(\n  req: NextApiRequest,\n  res: NextApiResponse,\n  options: NextAuthOptions\n): ReturnType<NextApiHandler>\n\ndeclare function NextAuth(options: NextAuthOptions): ReturnType<NextApiHandler>\n\nexport default NextAuth\n"
        }
    ]
}